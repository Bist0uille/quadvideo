import cv2
import tkinter as tk
from tkinter import filedialog, messagebox
import threading
import time
from PIL import Image, ImageTk
import numpy as np
import os
import random
import glob

class QuadVideoPlayer:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Lecteur 4 Vid√©os - Vue Carr√©")
        self.root.geometry("800x800")
        
        # Variables pour les vid√©os
        self.caps = [None, None, None, None]
        self.labels = [None, None, None, None]
        self.current_folder = None
        self.video_files_in_folder = []
        self.selected_videos = [None, None, None, None]
        self.previously_used_videos = set()  # Historique des vid√©os d√©j√† utilis√©es
        
        # Variables de contr√¥le - gestion am√©lior√©e
        self.playing = False
        self.video_threads = []
        self.thread_lock = threading.Lock()
        self.stop_event = threading.Event()
        
        self.setup_ui()
        
    def setup_ui(self):
        # Frame principal
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame pour les boutons
        button_frame = tk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Frame pour afficher le dossier courant
        folder_info_frame = tk.Frame(main_frame)
        folder_info_frame.pack(fill=tk.X, pady=(0, 5))
        
        # Label pour afficher le dossier courant
        self.folder_label = tk.Label(folder_info_frame, text="Aucun dossier s√©lectionn√©", 
                                    bg="#E0E0E0", fg="#333", font=("Arial", 9), 
                                    relief=tk.SUNKEN, anchor="w", padx=10)
        self.folder_label.pack(fill=tk.X)
        
        # Boutons de contr√¥le
        tk.Button(button_frame, text="Charger Vid√©os", command=self.load_videos, 
                 bg="#4CAF50", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="Charger Dossier", command=self.load_folder, 
                 bg="#9C27B0", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="4 Vid√©os Random", command=self.load_random_videos, 
                 bg="#FF5722", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="R√©initialiser Historique", command=self.reset_history, 
                 bg="#607D8B", fg="white", font=("Arial", 9)).pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="Play", command=self.play_videos, 
                 bg="#2196F3", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="Pause", command=self.pause_videos, 
                 bg="#FF9800", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(button_frame, text="Stop", command=self.stop_videos, 
                 bg="#f44336", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        # Frame pour les vid√©os (disposition 2x2)
        video_frame = tk.Frame(main_frame, bg="black")
        video_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configuration de la grille 2x2
        video_frame.grid_rowconfigure(0, weight=1)
        video_frame.grid_rowconfigure(1, weight=1)
        video_frame.grid_columnconfigure(0, weight=1)
        video_frame.grid_columnconfigure(1, weight=1)
        
        # Cr√©ation des labels pour chaque vid√©o
        positions = [(0, 0), (0, 1), (1, 0), (1, 1)]
        for i, (row, col) in enumerate(positions):
            label = tk.Label(video_frame, text=f"Vid√©o {i+1}\nUtilisez 'Charger Dossier' puis '4 Vid√©os Random'", 
                           bg="black", fg="white", font=("Arial", 10), bd=0, highlightthickness=0)
            label.grid(row=row, column=col, sticky="nsew", padx=0, pady=0)
            self.labels[i] = label
    
    def load_folder(self):
        """Charge un dossier contenant des vid√©os"""
        folder_path = filedialog.askdirectory(title="S√©lectionner un dossier contenant des vid√©os",
                                             initialdir=self.current_folder if self.current_folder else None)
        
        if not folder_path:
            return
        
        self.current_folder = folder_path
        
        # R√©initialiser l'historique quand on change de dossier
        self.previously_used_videos.clear()
        
        # Mettre √† jour l'affichage du dossier
        folder_display = folder_path
        if len(folder_display) > 80:  # Tronquer si trop long
            folder_display = "..." + folder_display[-77:]
        self.folder_label.config(text=f"üìÅ Dossier: {folder_display}")
        
        # Extensions vid√©o support√©es
        video_extensions = ['*.mp4', '*.avi', '*.mov', '*.mkv', '*.wmv', '*.flv', '*.m4v', '*.webm']
        
        # Rechercher tous les fichiers vid√©o dans le dossier et sous-dossiers
        self.video_files_in_folder = []
        for extension in video_extensions:
            # Recherche dans le dossier principal
            self.video_files_in_folder.extend(glob.glob(os.path.join(folder_path, extension)))
            # Recherche dans les sous-dossiers
            self.video_files_in_folder.extend(glob.glob(os.path.join(folder_path, '**', extension), recursive=True))
        
        # Supprimer les doublons et trier
        self.video_files_in_folder = list(set(self.video_files_in_folder))
        self.video_files_in_folder.sort()
        
        print(f"DEBUG: Trouv√© {len(self.video_files_in_folder)} vid√©os dans le dossier")
        for i, video in enumerate(self.video_files_in_folder[:10]):  # Afficher les 10 premi√®res
            print(f"  {i+1}: {os.path.basename(video)}")
        
        if len(self.video_files_in_folder) < 4:
            messagebox.showwarning("Attention", 
                                 f"Le dossier contient seulement {len(self.video_files_in_folder)} vid√©o(s).\n"
                                 f"Il faut au moins 4 vid√©os pour utiliser cette fonctionnalit√©.")
            self.folder_label.config(text=f"üìÅ Dossier: {folder_display} ‚ö†Ô∏è ({len(self.video_files_in_folder)} vid√©os - insuffisant)")
            return
        
        # Mettre √† jour l'affichage avec le nombre de vid√©os
        self.folder_label.config(text=f"üìÅ Dossier: {folder_display} ‚úÖ ({len(self.video_files_in_folder)} vid√©os)")
        
        # Pas de message popup - juste mettre √† jour les labels
        for i in range(4):
            self.labels[i].config(text=f"Vid√©o {i+1}\nDossier charg√© - Cliquez '4 Vid√©os Random'")
    
    def reset_history(self):
        """R√©initialise l'historique des vid√©os d√©j√† utilis√©es"""
        self.previously_used_videos.clear()
        print("DEBUG: Historique des vid√©os r√©initialis√©")
        messagebox.showinfo("Historique", "L'historique des vid√©os utilis√©es a √©t√© r√©initialis√©.\nToutes les vid√©os peuvent maintenant √™tre res√©lectionn√©es.")
        
        # Mettre √† jour l'affichage si un dossier est charg√©
        if self.current_folder and self.video_files_in_folder:
            folder_display = self.current_folder
            if len(folder_display) > 80:
                folder_display = "..." + folder_display[-77:]
            self.folder_label.config(text=f"üìÅ Dossier: {folder_display} ‚úÖ ({len(self.video_files_in_folder)} vid√©os) üîÑ Historique effac√©")
    
    def force_cleanup(self):
        """Nettoyage forc√© et imm√©diat de toutes les ressources"""
        print("DEBUG: D√©but du nettoyage forc√©")
        
        # Arr√™ter imm√©diatement toute lecture
        self.playing = False
        self.stop_event.set()
        
        # Attendre que tous les threads se terminent (avec timeout)
        with self.thread_lock:
            for i, thread in enumerate(self.video_threads):
                if thread.is_alive():
                    print(f"DEBUG: Attente de la fin du thread {i}")
                    thread.join(timeout=0.5)  # Timeout plus court
                    if thread.is_alive():
                        print(f"DEBUG: Thread {i} toujours actif apr√®s timeout")
            
            self.video_threads.clear()
        
        # Fermer toutes les captures vid√©o
        for i in range(4):
            if self.caps[i] is not None:
                print(f"DEBUG: Fermeture de la capture {i}")
                try:
                    self.caps[i].release()
                except:
                    pass
                self.caps[i] = None
            
            # Nettoyer les labels
            try:
                self.labels[i].config(image="")
                if hasattr(self.labels[i], 'image'):
                    self.labels[i].image = None
            except:
                pass
        
        # R√©initialiser l'√©v√©nement d'arr√™t
        self.stop_event.clear()
        
        # Petit d√©lai pour s'assurer que tout est nettoy√©
        time.sleep(0.1)
        print("DEBUG: Nettoyage forc√© termin√©")
    
    def select_unique_random_videos(self):
        """S√©lectionne 4 vid√©os vraiment al√©atoires et uniques, en √©vitant celles d√©j√† utilis√©es"""
        if len(self.video_files_in_folder) < 4:
            return []
        
        # Ajouter les vid√©os actuellement charg√©es √† l'historique
        for video in self.selected_videos:
            if video is not None:
                self.previously_used_videos.add(video)
        
        # Calculer les vid√©os disponibles (non utilis√©es r√©cemment)
        available_videos = [v for v in self.video_files_in_folder if v not in self.previously_used_videos]
        
        print(f"DEBUG: Total de vid√©os: {len(self.video_files_in_folder)}")
        print(f"DEBUG: Vid√©os d√©j√† utilis√©es: {len(self.previously_used_videos)}")
        print(f"DEBUG: Vid√©os disponibles: {len(available_videos)}")
        
        # Si on n'a pas assez de nouvelles vid√©os, on r√©initialise partiellement l'historique
        if len(available_videos) < 4:
            print("DEBUG: Pas assez de nouvelles vid√©os - r√©initialisation partielle de l'historique")
            
            # Garder seulement les 4 vid√©os actuellement charg√©es dans l'historique
            current_videos = {v for v in self.selected_videos if v is not None}
            self.previously_used_videos = current_videos.copy()
            
            # Recalculer les vid√©os disponibles
            available_videos = [v for v in self.video_files_in_folder if v not in self.previously_used_videos]
            
            print(f"DEBUG: Apr√®s r√©initialisation partielle - Vid√©os disponibles: {len(available_videos)}")
            
            # Si on n'a toujours pas assez, prendre toutes les vid√©os sauf les actuelles
            if len(available_videos) < 4:
                available_videos = [v for v in self.video_files_in_folder if v not in current_videos]
                print(f"DEBUG: Utilisation de toutes les vid√©os sauf les actuelles: {len(available_videos)}")
        
        # M√©langer plusieurs fois pour plus de randomisation
        for _ in range(3):
            random.shuffle(available_videos)
        
        # Prendre les 4 premi√®res vid√©os uniques
        selected = available_videos[:4]
        
        print("DEBUG: Nouvelles vid√©os s√©lectionn√©es:")
        for i, video in enumerate(selected):
            print(f"  Position {i+1}: {os.path.basename(video)}")
        
        return selected
    
    def load_random_videos(self):
        """Charge 4 vid√©os al√©atoires depuis le dossier - version am√©lior√©e avec historique"""
        if not self.video_files_in_folder:
            messagebox.showwarning("Attention", "Veuillez d'abord charger un dossier avec 'Charger Dossier'")
            return
        
        if len(self.video_files_in_folder) < 4:
            messagebox.showwarning("Attention", "Il faut au moins 4 vid√©os dans le dossier")
            return
        
        print("DEBUG: D√©but du chargement de vid√©os al√©atoires")
        
        # Nettoyage forc√© et complet
        self.force_cleanup()
        
        # Mettre √† jour l'affichage du dossier pour indiquer le chargement
        current_text = self.folder_label.cget("text")
        base_text = current_text.split(" üîÑ")[0].split(" ‚úÖ")[0]
        self.folder_label.config(text=f"{base_text} üîÑ Chargement nouvelles vid√©os...")
        self.root.update()
        
        # S√©lectionner 4 vid√©os uniques et nouvelles
        selected_video_paths = self.select_unique_random_videos()
        
        if len(selected_video_paths) < 4:
            messagebox.showerror("Erreur", "Impossible de s√©lectionner 4 vid√©os diff√©rentes")
            return
        
        # Charger chaque vid√©o
        success_count = 0
        new_selected_videos = [None, None, None, None]
        
        for i in range(4):
            video_path = selected_video_paths[i]
            print(f"DEBUG: Chargement de la vid√©o {i+1}: {os.path.basename(video_path)}")
            
            # Cr√©er une nouvelle capture pour cette vid√©o
            cap = cv2.VideoCapture(video_path)
            
            if cap.isOpened():
                # V√©rifier que la vid√©o a bien des frames
                ret, test_frame = cap.read()
                if ret:
                    # Remettre au d√©but
                    cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                    
                    self.caps[i] = cap
                    new_selected_videos[i] = video_path
                    filename = os.path.basename(video_path)
                    display_name = filename[:25] + ('...' if len(filename) > 25 else '')
                    self.labels[i].config(text=f"Vid√©o {i+1}\n{display_name}")
                    success_count += 1
                    print(f"DEBUG: Vid√©o {i+1} charg√©e avec succ√®s")
                else:
                    print(f"DEBUG: Vid√©o {i+1} ne contient pas de frames valides")
                    cap.release()
                    self.labels[i].config(text=f"Vid√©o {i+1}\nErreur: pas de frames")
            else:
                print(f"DEBUG: Impossible d'ouvrir la vid√©o {i+1}")
                cap.release()
                self.labels[i].config(text=f"Vid√©o {i+1}\nErreur de chargement")
        
        # Mettre √† jour la liste des vid√©os s√©lectionn√©es seulement si le chargement a r√©ussi
        if success_count == 4:
            self.selected_videos = new_selected_videos
        
        # Restaurer l'affichage du dossier
        folder_display = self.current_folder
        if len(folder_display) > 80:
            folder_display = "..." + folder_display[-77:]
        
        # Afficher le nombre de vid√©os utilis√©es vs total
        used_count = len(self.previously_used_videos)
        total_count = len(self.video_files_in_folder)
        self.folder_label.config(text=f"üìÅ Dossier: {folder_display} ‚úÖ ({total_count} vid√©os) üé¨ {used_count} utilis√©es")
        
        print(f"DEBUG: {success_count} vid√©os charg√©es sur 4")
        
        # Auto-play si toutes les vid√©os sont charg√©es
        if success_count == 4:
            print("DEBUG: D√©marrage automatique de la lecture")
            # Petit d√©lai pour s'assurer que tout est pr√™t
            self.root.after(100, self.play_videos)
        else:
            if success_count == 0:
                messagebox.showwarning("Erreur", "Aucune vid√©o n'a pu √™tre charg√©e")
            else:
                messagebox.showwarning("Attention", f"Seulement {success_count} vid√©o(s) ont pu √™tre charg√©es sur 4")
    
    def load_videos(self):
        """Charge les 4 vid√©os manuellement"""
        self.force_cleanup()
        
        video_files = []
        for i in range(4):
            file_path = filedialog.askopenfilename(
                title=f"S√©lectionner la vid√©o {i+1}",
                filetypes=[
                    ("Fichiers vid√©o", "*.mp4 *.avi *.mov *.mkv *.wmv *.flv"),
                    ("Tous les fichiers", "*.*")
                ]
            )
            if file_path:
                video_files.append(file_path)
            else:
                messagebox.showwarning("Attention", f"Vid√©o {i+1} non s√©lectionn√©e")
                return
        
        # Initialiser les captures vid√©o
        success_count = 0
        for i, file_path in enumerate(video_files):
            cap = cv2.VideoCapture(file_path)
            if cap.isOpened():
                ret, test_frame = cap.read()
                if ret:
                    cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                    self.caps[i] = cap
                    self.selected_videos[i] = file_path
                    self.labels[i].config(text=f"Vid√©o {i+1}\nCharg√©e")
                    success_count += 1
                else:
                    cap.release()
                    messagebox.showerror("Erreur", f"La vid√©o {i+1} ne contient pas de frames valides")
                    return
            else:
                cap.release()
                messagebox.showerror("Erreur", f"Impossible d'ouvrir la vid√©o {i+1}")
                return
        
        if success_count == 4:
            messagebox.showinfo("Succ√®s", "Toutes les vid√©os ont √©t√© charg√©es!")
    
    def play_videos(self):
        """Lance la lecture des 4 vid√©os"""
        # V√©rifier que toutes les captures sont valides
        valid_caps_count = sum(1 for cap in self.caps if cap is not None and cap.isOpened())
        
        if valid_caps_count == 0:
            messagebox.showwarning("Attention", "Aucune vid√©o valide n'est charg√©e")
            return
        
        print(f"DEBUG: D√©marrage de la lecture avec {valid_caps_count} vid√©os")
        
        if not self.playing:
            self.playing = True
            self.stop_event.clear()
            
            # Cr√©er un nouveau thread pour chaque position vid√©o
            with self.thread_lock:
                for i in range(4):
                    if self.caps[i] is not None and self.caps[i].isOpened():
                        thread = threading.Thread(target=self.play_video_safe, args=(i,), daemon=True)
                        thread.start()
                        self.video_threads.append(thread)
                        print(f"DEBUG: Thread {i} d√©marr√©")
    
    def play_video_safe(self, video_index):
        """Version thread-safe de la lecture vid√©o"""
        cap = self.caps[video_index]
        label = self.labels[video_index]
        
        if cap is None or not cap.isOpened():
            print(f"DEBUG: Capture {video_index} invalide")
            return
        
        print(f"DEBUG: D√©but de lecture pour vid√©o {video_index}")
        frame_count = 0
        
        try:
            while self.playing and not self.stop_event.is_set():
                ret, frame = cap.read()
                
                if ret:
                    frame_count += 1
                    
                    # Redimensionner et afficher le frame
                    try:
                        # Mettre √† jour les dimensions du label
                        label.update_idletasks()
                        label_width = label.winfo_width()
                        label_height = label.winfo_height()
                        
                        if label_width > 10 and label_height > 10:
                            # Obtenir les dimensions originales
                            h, w = frame.shape[:2]
                            
                            # Mode crop : redimensionner pour remplir compl√®tement l'espace
                            # en coupant ce qui d√©passe pour garder les proportions
                            scale_w = label_width / w
                            scale_h = label_height / h
                            scale = max(scale_w, scale_h)  # Prendre le plus grand facteur
                            
                            # Nouvelles dimensions apr√®s mise √† l'√©chelle
                            new_w = int(w * scale)
                            new_h = int(h * scale)
                            
                            if new_w > 0 and new_h > 0:
                                # Redimensionner la frame
                                frame_resized = cv2.resize(frame, (new_w, new_h))
                                
                                # Calculer les coordonn√©es de crop pour centrer
                                start_x = max(0, (new_w - label_width) // 2)
                                start_y = max(0, (new_h - label_height) // 2)
                                end_x = start_x + label_width
                                end_y = start_y + label_height
                                
                                # Cropper l'image pour qu'elle remplisse exactement le label
                                frame_cropped = frame_resized[start_y:end_y, start_x:end_x]
                                
                                # S'assurer que les dimensions correspondent exactement
                                if frame_cropped.shape[1] != label_width or frame_cropped.shape[0] != label_height:
                                    frame_cropped = cv2.resize(frame_cropped, (label_width, label_height))
                                
                                # Convertir et afficher
                                frame_rgb = cv2.cvtColor(frame_cropped, cv2.COLOR_BGR2RGB)
                                img = Image.fromarray(frame_rgb)
                                photo = ImageTk.PhotoImage(img)
                                
                                # Mise √† jour thread-safe
                                if self.playing and not self.stop_event.is_set():
                                    label.config(image=photo, text="")
                                    label.image = photo
                    
                    except Exception as e:
                        print(f"DEBUG: Erreur affichage vid√©o {video_index}: {e}")
                        break
                    
                    # Contr√¥le de la vitesse (30 FPS approximatif)
                    time.sleep(0.033)
                    
                else:
                    # Fin de vid√©o - recommencer
                    if self.playing and not self.stop_event.is_set():
                        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                        print(f"DEBUG: Red√©marrage vid√©o {video_index} (frame {frame_count})")
                        frame_count = 0
                    else:
                        break
                        
        except Exception as e:
            print(f"DEBUG: Erreur dans play_video_safe {video_index}: {e}")
        
        print(f"DEBUG: Fin de lecture pour vid√©o {video_index}")
    
    def pause_videos(self):
        """Met en pause les vid√©os"""
        print("DEBUG: Pause demand√©e")
        self.playing = False
    
    def stop_videos(self):
        """Arr√™te les vid√©os et les remet au d√©but"""
        print("DEBUG: Stop demand√©")
        self.force_cleanup()
        
        # Restaurer les labels avec les noms de fichiers
        for i in range(4):
            if self.selected_videos[i] is not None:
                filename = os.path.basename(self.selected_videos[i])
                display_name = filename[:25] + ('...' if len(filename) > 25 else '')
                self.labels[i].config(image="", text=f"Vid√©o {i+1}\n{display_name}\nArr√™t√©e")
            else:
                self.labels[i].config(image="", text=f"Vid√©o {i+1}\nArr√™t√©e")
    
    def on_closing(self):
        """Nettoyage lors de la fermeture"""
        print("DEBUG: Fermeture de l'application")
        self.force_cleanup()
        self.root.destroy()
    
    def run(self):
        """Lance l'application"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

if __name__ == "__main__":
    # V√©rifier si OpenCV est install√©
    try:
        import cv2
    except ImportError:
        print("OpenCV n'est pas install√©. Installez-le avec: pip install opencv-python")
        exit(1)
    
    # V√©rifier si Pillow est install√©
    try:
        from PIL import Image, ImageTk
    except ImportError:
        print("Pillow n'est pas install√©. Installez-le avec: pip install Pillow")
        exit(1)
    
    # Lancer l'application
    app = QuadVideoPlayer()
    app.run()